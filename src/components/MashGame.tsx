import { ChangeEvent, FC, useState } from "react";
import { MashCategory } from "../types/MashCategory";
import DelayedLinePrinter from "./DelayedLinePrinter";
import { removeElementAtIndex } from "../utils/removeElementAtIndex";
import categories from "../data/categories";

const MashGame: FC = () => {
  const [groups, setGroups] = useState<MashCategory[]>(categories.defaultState);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [resultDeleted, setResultDeleted] = useState<string[]>([]);
  const [resultPending, setResultPending] = useState<string>("");
  const [resultFinal, setResultFinal] = useState<string>("");
  const [magicNumber, setMagicNumber] = useState<number>(3);
  const [error, setError] = useState('');
  const MIN_NUMBER = 3
  const MAX_NUMBER = 10

  const handleTextChange = (
    groupIndex: number,
    itemIndex: number,
    e: ChangeEvent<HTMLInputElement>
  ) => {
    const newGroups = [...groups];
    newGroups[groupIndex].items[itemIndex] = e.target.value;
    setGroups(newGroups);
  };

  const handleNumberChange = (
    e: ChangeEvent<HTMLInputElement>
  ) => {
    const inputValue = e.target.value;
    if (/^\d+$/.test(inputValue)) {
      const numberValue = parseInt(inputValue, 10);
      if (numberValue >= MIN_NUMBER && numberValue <= MAX_NUMBER) {
        setMagicNumber(Number(e.target.value));
        setError('');
      } else {
        setError('Number must be between 3 and 10');
      }
    } else {
      setError('Please enter a valid number');
    }
  }

  const pendingResultToFinalResult = () => {
    setResultFinal(resultPending);
    setResultPending("");
  };

  const reset = () => {
    setResultFinal("");
    setGroups(categories.defaultState);
  };

  const doTheMash = async () => {
    setResultPending("");
    setResultFinal("");
    setResultDeleted([]);
    setIsLoading(true);

    const mashValues = [
      "You live in a Mansion",
      "You live in an Apartment",
      "You live in a Shack",
      "You live in a House",
    ];
    const allValues: Array<string> = [
      ...mashValues,
      ...groups.flatMap((g) => g.items.flatMap((gi) => `${g.header}: ${gi}`)),
    ];

    const resultHasAtLeastOneFromEachGroup = (resultValues: string[]) =>
    (
      resultValues[0].indexOf("You live in a") === 0 &&
      groups.every((g) =>
        resultValues.find((v) => v.indexOf(`${g.header}:`) === 0)
      )
    );

    const targetValueCount = groups.length + 1;
    let values = allValues;
    const deleted = [];
    for (let i = magicNumber - 1; i < allValues.length ** 2; i += magicNumber - 1) {
      if (values.length === targetValueCount) {
        break;
      }
      while (true) {
        let indexToDelete = i % values.length;
        const candidate = removeElementAtIndex(values, indexToDelete);
        if (resultHasAtLeastOneFromEachGroup(candidate)) {
          deleted.push(values[indexToDelete]);
          values = candidate;
          break;
        }
        else {
          i++;
        }
      }
    }

    const result = [...values];
    setResultDeleted(deleted);
    setResultPending(result.join("\n"));
    setTimeout(() => setIsLoading(false), 200);
  };

  return (
    <main>
      <header className="text-white text-center mb-10">
        <h1 className="text-4xl">MASH</h1>
      </header>

      <section id="mash-categories">
        {groups.map((group, groupIndex) => (
          <div
            className="w-full md:w-6/12 xl:w-3/12 p-2 inline-block"
            key={groupIndex}
          >
            <h2 className="text-white">{group.header}</h2>
            {group.items.map((text, itemIndex) => (
              <input
                key={itemIndex}
                type="text"
                value={text}
                onChange={(e) => handleTextChange(groupIndex, itemIndex, e)}
                className="w-full mb-2 p-1"
                data-testid={`input-${groupIndex}-${itemIndex}`}
              />
            ))}
          </div>
        ))}
      </section>

      <section id="mash-action-bar" className="m-3 p-3 border-t">
        <button
          type="button"
          className="cursor-pointer bg-purple-500 hover:bg-purple-600 text-white font-bold py-2 px-4 rounded shadow active:translate-y-px mb-4 mt-4"
          title="Random Category"
          onClick={() => setGroups(categories.autoGeneratedState)}
          autoFocus={true}
        >
          Auto Generate
        </button>
        {error ? <h2 className="text-red-500">{error}</h2>
          : <h2 className="text-white">Enter number between {MIN_NUMBER} and {MAX_NUMBER}</h2>}
        <input
          key="magic-number"
          data-testid="magic-number-input"
          type="number"
          value={magicNumber}
          onChange={(e) => handleNumberChange(e)}
          className="mb-2 p-1 mr-4"
          required
        />
        <button
          type="button"
          className="cursor-pointer bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded shadow active:translate-y-px"
          onClick={doTheMash}
          data-testid="play-button"
        >
          Play
        </button>
      </section>

      {isLoading ? (
        <>Loading...</>
      ) : resultPending ? (
        <section id="mash-results" className="m-3 p-3 border-t">
          <div className="line-through">
            <DelayedLinePrinter
              strings={resultDeleted}
              callback={pendingResultToFinalResult}
            />
          </div>
        </section>
      ) : resultFinal ? (
        <section id="mash-results" className="m-3 p-3 border-t">
          <div className="line-through">
            <DelayedLinePrinter strings={resultDeleted} delay={0} />
          </div>
          <p className="whitespace-pre bg-white shadow-lg rounded-lg p-4 mt-4 text-black">
            {resultFinal}
          </p>
          <div className="mt-4">
            <button
              onClick={reset}
              data-testid="reset-button"
              className="cursor-pointer ml-2 bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded shadow active:translate-y-px"
            >
              Reset
            </button>
          </div>
        </section>
      ) : null}
    </main>
  );
};

export default MashGame;
